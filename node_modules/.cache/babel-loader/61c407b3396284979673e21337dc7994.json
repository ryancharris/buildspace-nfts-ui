{"ast":null,"code":"var _jsxFileName = \"/Users/ryan/git/buildspace/epic-nfts-react/src/App.js\",\n    _s = $RefreshSig$();\n\nimport \"./styles/App.css\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport myEpicNft from \"./utils/MyEpicNFT.json\"; // Constants\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TWITTER_HANDLE = \"ryan_c_harris\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = \"\";\nconst TOTAL_MINT_COUNT = 50;\n\nconst App = () => {\n  _s();\n\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  console.log(currentAccount);\n  useEffect(() => {\n    checkIfWalletConnected();\n  }, []);\n\n  const checkIfWalletConnected = async () => {\n    const {\n      ethereum\n    } = window;\n\n    if (!ethereum) {\n      console.log(\"Connect your MetaMask wallet!\");\n    } else {\n      console.log(\"You are connected to MetaMask\", ethereum);\n    }\n\n    const accounts = await ethereum.request({\n      method: \"eth_accounts\"\n    });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account);\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  };\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const askContractToMintNFT = async () => {\n    const CONTRACT_ADDRESS = \"0xFA4f1D6d60493A064247A40F4b796e5B49302911\";\n\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n        console.log(\"Going to pop wallet now to pay gas...\");\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n        console.log(\"Mining...please wait.\");\n        await nftTxn.wait();\n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"cta-button connect-wallet-button\",\n    onClick: connectWallet,\n    children: \"Connect to Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n\n  const renderMintUi = () => {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: askContractToMintNFT,\n      className: \"cta-button connect-wallet-button\",\n      children: \"Mint NFT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header gradient-text\",\n          children: \"My NFT Collection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"Each unique. Each beautiful. Discover your NFT today.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), currentAccount === \"\" ? renderNotConnectedContainer() : renderMintUi()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `built by @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"Oez+vfH4X005OLgBo/Rzy9wdCKo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/ryan/git/buildspace/epic-nfts-react/src/App.js"],"names":["React","useEffect","useState","ethers","myEpicNft","TWITTER_HANDLE","TWITTER_LINK","OPENSEA_LINK","TOTAL_MINT_COUNT","App","currentAccount","setCurrentAccount","console","log","checkIfWalletConnected","ethereum","window","accounts","request","method","length","account","connectWallet","alert","err","askContractToMintNFT","CONTRACT_ADDRESS","provider","providers","Web3Provider","signer","getSigner","connectedContract","Contract","abi","nftTxn","makeAnEpicNFT","wait","hash","error","renderNotConnectedContainer","renderMintUi","twitterLogo"],"mappings":"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","sourcesContent":["import \"./styles/App.css\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport myEpicNft from \"./utils/MyEpicNFT.json\";\n\n// Constants\nconst TWITTER_HANDLE = \"ryan_c_harris\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = \"\";\nconst TOTAL_MINT_COUNT = 50;\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  console.log(currentAccount);\n\n  useEffect(() => {\n    checkIfWalletConnected();\n  }, []);\n\n  const checkIfWalletConnected = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      console.log(\"Connect your MetaMask wallet!\");\n    } else {\n      console.log(\"You are connected to MetaMask\", ethereum);\n    }\n\n    const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account);\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  };\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const askContractToMintNFT = async () => {\n    const CONTRACT_ADDRESS = \"0xFA4f1D6d60493A064247A40F4b796e5B49302911\";\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          myEpicNft.abi,\n          signer\n        );\n\n        console.log(\"Going to pop wallet now to pay gas...\");\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n\n        console.log(\"Mining...please wait.\");\n        await nftTxn.wait();\n\n        console.log(\n          `Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`\n        );\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  const renderMintUi = () => {\n    return (\n      <button\n        onClick={askContractToMintNFT}\n        className=\"cta-button connect-wallet-button\"\n      >\n        Mint NFT\n      </button>\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">My NFT Collection</p>\n          <p className=\"sub-text\">\n            Each unique. Each beautiful. Discover your NFT today.\n          </p>\n          {currentAccount === \"\"\n            ? renderNotConnectedContainer()\n            : renderMintUi()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built by @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}