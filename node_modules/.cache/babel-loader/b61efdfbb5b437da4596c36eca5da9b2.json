{"ast":null,"code":"var _jsxFileName = \"/Users/ryan/git/buildspace/epic-nfts-react/src/App.js\",\n    _s = $RefreshSig$();\n\nimport \"./styles/App.css\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport myEpicNft from \"./utils/MyEpicNFT.json\"; // Constants\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TWITTER_HANDLE = \"ryan_c_harris\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = \"\";\nconst TOTAL_MINT_COUNT = 50;\n\nconst App = () => {\n  _s();\n\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [connecting, setConnecting] = useState(false);\n  useEffect(() => {\n    checkIfWalletConnected();\n  }, []);\n\n  const checkIfWalletConnected = async () => {\n    const {\n      ethereum\n    } = window;\n\n    if (!ethereum) {\n      console.log(\"Connect your MetaMask wallet!\");\n    } else {\n      console.log(\"You are connected to MetaMask\", ethereum);\n    }\n\n    const accounts = await ethereum.request({\n      method: \"eth_accounts\"\n    });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account);\n      setupEventListener();\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  };\n\n  const connectWallet = async () => {\n    setConnecting(true);\n\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n      setupEventListener();\n      setConnecting(false);\n    } catch (err) {\n      console.log(err);\n      setConnecting(false);\n    }\n  };\n\n  const askContractToMintNFT = async () => {\n    const CONTRACT_ADDRESS = \"0xDB24bE6Fb6c5e4c6F3C165663203b02bBDA70B59\";\n\n    try {\n      setLoading(true);\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n        console.log(\"Going to pop wallet now to pay gas...\");\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n        console.log(\"Mining...please wait.\");\n        await nftTxn.wait();\n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n        setLoading(false);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n        setLoading(false);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const setupEventListener = async () => {\n    const CONTRACT_ADDRESS = \"0xDB24bE6Fb6c5e4c6F3C165663203b02bBDA70B59\"; // Most of this looks the same as our function askContractToMintNft\n\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        // Same stuff again\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer); // THIS IS THE MAGIC SAUCE.\n        // This will essentially \"capture\" our event when our contract throws it.\n        // If you're familiar with webhooks, it's very similar to that!\n\n        connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber());\n          alert(`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`);\n        });\n        console.log(\"Setup event listener!\");\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"cta-button connect-wallet-button\",\n    onClick: connectWallet,\n    children: \"Connect to Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n\n  const renderMintUi = () => {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: askContractToMintNFT,\n      className: \"cta-button connect-wallet-button\",\n      children: \"Mint NFT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header gradient-text\",\n          children: \"What Will Happen NFTs\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"Tech predictions. General sillyness.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this), !loading && connecting && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text sub-text--small\",\n          children: \"Connecting...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 13\n        }, this), loading && !connecting && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text sub-text--small\",\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 13\n        }, this), !loading && !connecting && (currentAccount === \"\" ? renderNotConnectedContainer() : renderMintUi())]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `built by @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"a+XnTAQHIQnxIK1kEi5g7V3qOts=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/ryan/git/buildspace/epic-nfts-react/src/App.js"],"names":["React","useEffect","useState","ethers","myEpicNft","TWITTER_HANDLE","TWITTER_LINK","OPENSEA_LINK","TOTAL_MINT_COUNT","App","currentAccount","setCurrentAccount","loading","setLoading","connecting","setConnecting","checkIfWalletConnected","ethereum","window","console","log","accounts","request","method","length","account","setupEventListener","connectWallet","alert","err","askContractToMintNFT","CONTRACT_ADDRESS","provider","providers","Web3Provider","signer","getSigner","connectedContract","Contract","abi","nftTxn","makeAnEpicNFT","wait","hash","error","on","from","tokenId","toNumber","renderNotConnectedContainer","renderMintUi","twitterLogo"],"mappings":";;;AAAA,OAAO,kBAAP;;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,SAAP,MAAsB,wBAAtB,C,CAEA;;;AACA,MAAMC,cAAc,GAAG,eAAvB;AACA,MAAMC,YAAY,GAAI,uBAAsBD,cAAe,EAA3D;AACA,MAAME,YAAY,GAAG,EAArB;AACA,MAAMC,gBAAgB,GAAG,EAAzB;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCT,QAAQ,CAAC,EAAD,CAApD;AAEA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACY,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,CAAC,KAAD,CAA5C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,sBAAsB;AACvB,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMA,sBAAsB,GAAG,YAAY;AACzC,UAAM;AAAEC,MAAAA;AAAF,QAAeC,MAArB;;AAEA,QAAI,CAACD,QAAL,EAAe;AACbE,MAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACD,KAFD,MAEO;AACLD,MAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA6CH,QAA7C;AACD;;AAED,UAAMI,QAAQ,GAAG,MAAMJ,QAAQ,CAACK,OAAT,CAAiB;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAjB,CAAvB;;AAEA,QAAIF,QAAQ,CAACG,MAAT,KAAoB,CAAxB,EAA2B;AACzB,YAAMC,OAAO,GAAGJ,QAAQ,CAAC,CAAD,CAAxB;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CK,OAA5C;AACAd,MAAAA,iBAAiB,CAACc,OAAD,CAAjB;AACAC,MAAAA,kBAAkB;AACnB,KALD,MAKO;AACLP,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACD;AACF,GAnBD;;AAqBA,QAAMO,aAAa,GAAG,YAAY;AAChCZ,IAAAA,aAAa,CAAC,IAAD,CAAb;;AAEA,QAAI;AACF,YAAM;AAAEE,QAAAA;AAAF,UAAeC,MAArB;;AAEA,UAAI,CAACD,QAAL,EAAe;AACbW,QAAAA,KAAK,CAAC,eAAD,CAAL;AACA;AACD;;AAED,YAAMP,QAAQ,GAAG,MAAMJ,QAAQ,CAACK,OAAT,CAAiB;AACtCC,QAAAA,MAAM,EAAE;AAD8B,OAAjB,CAAvB;AAGAJ,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBC,QAAQ,CAAC,CAAD,CAAjC;AACAV,MAAAA,iBAAiB,CAACU,QAAQ,CAAC,CAAD,CAAT,CAAjB;AACAK,MAAAA,kBAAkB;AAClBX,MAAAA,aAAa,CAAC,KAAD,CAAb;AACD,KAfD,CAeE,OAAOc,GAAP,EAAY;AACZV,MAAAA,OAAO,CAACC,GAAR,CAAYS,GAAZ;AACAd,MAAAA,aAAa,CAAC,KAAD,CAAb;AACD;AACF,GAtBD;;AAwBA,QAAMe,oBAAoB,GAAG,YAAY;AACvC,UAAMC,gBAAgB,GAAG,4CAAzB;;AACA,QAAI;AACFlB,MAAAA,UAAU,CAAC,IAAD,CAAV;AAEA,YAAM;AAAEI,QAAAA;AAAF,UAAeC,MAArB;;AAEA,UAAID,QAAJ,EAAc;AACZ,cAAMe,QAAQ,GAAG,IAAI7B,MAAM,CAAC8B,SAAP,CAAiBC,YAArB,CAAkCjB,QAAlC,CAAjB;AACA,cAAMkB,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;AACA,cAAMC,iBAAiB,GAAG,IAAIlC,MAAM,CAACmC,QAAX,CACxBP,gBADwB,EAExB3B,SAAS,CAACmC,GAFc,EAGxBJ,MAHwB,CAA1B;AAMAhB,QAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ;AACA,YAAIoB,MAAM,GAAG,MAAMH,iBAAiB,CAACI,aAAlB,EAAnB;AAEAtB,QAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACA,cAAMoB,MAAM,CAACE,IAAP,EAAN;AAEAvB,QAAAA,OAAO,CAACC,GAAR,CACG,2DAA0DoB,MAAM,CAACG,IAAK,EADzE;AAGA9B,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD,OAnBD,MAmBO;AACLM,QAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACAP,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF,KA5BD,CA4BE,OAAO+B,KAAP,EAAc;AACdzB,MAAAA,OAAO,CAACC,GAAR,CAAYwB,KAAZ;AACD;AACF,GAjCD;;AAmCA,QAAMlB,kBAAkB,GAAG,YAAY;AACrC,UAAMK,gBAAgB,GAAG,4CAAzB,CADqC,CAGrC;;AACA,QAAI;AACF,YAAM;AAAEd,QAAAA;AAAF,UAAeC,MAArB;;AAEA,UAAID,QAAJ,EAAc;AACZ;AACA,cAAMe,QAAQ,GAAG,IAAI7B,MAAM,CAAC8B,SAAP,CAAiBC,YAArB,CAAkCjB,QAAlC,CAAjB;AACA,cAAMkB,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;AACA,cAAMC,iBAAiB,GAAG,IAAIlC,MAAM,CAACmC,QAAX,CACxBP,gBADwB,EAExB3B,SAAS,CAACmC,GAFc,EAGxBJ,MAHwB,CAA1B,CAJY,CAUZ;AACA;AACA;;AACAE,QAAAA,iBAAiB,CAACQ,EAAlB,CAAqB,kBAArB,EAAyC,CAACC,IAAD,EAAOC,OAAP,KAAmB;AAC1D5B,UAAAA,OAAO,CAACC,GAAR,CAAY0B,IAAZ,EAAkBC,OAAO,CAACC,QAAR,EAAlB;AACApB,UAAAA,KAAK,CACF,kMAAiMG,gBAAiB,IAAGgB,OAAO,CAACC,QAAR,EAAmB,EADtO,CAAL;AAGD,SALD;AAOA7B,QAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACD,OArBD,MAqBO;AACLD,QAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACD;AACF,KA3BD,CA2BE,OAAOwB,KAAP,EAAc;AACdzB,MAAAA,OAAO,CAACC,GAAR,CAAYwB,KAAZ;AACD;AACF,GAlCD;;AAoCA,QAAMK,2BAA2B,GAAG,mBAClC;AACE,IAAA,SAAS,EAAC,kCADZ;AAEE,IAAA,OAAO,EAAEtB,aAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;;AASA,QAAMuB,YAAY,GAAG,MAAM;AACzB,wBACE;AACE,MAAA,OAAO,EAAEpB,oBADX;AAEE,MAAA,SAAS,EAAC,kCAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAQD,GATD;;AAWA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,gCACE;AAAG,UAAA,SAAS,EAAC,sBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAG,UAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,EAIG,CAAClB,OAAD,IAAYE,UAAZ,iBACC;AAAG,UAAA,SAAS,EAAC,0BAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALJ,EAOGF,OAAO,IAAI,CAACE,UAAZ,iBACC;AAAG,UAAA,SAAS,EAAC,0BAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBARJ,EAUG,CAACF,OAAD,IACC,CAACE,UADF,KAEEJ,cAAc,KAAK,EAAnB,GACGuC,2BAA2B,EAD9B,GAEGC,YAAY,EAJjB,CAVH;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAiBE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,gCACE;AAAK,UAAA,GAAG,EAAC,cAAT;AAAwB,UAAA,SAAS,EAAC,cAAlC;AAAiD,UAAA,GAAG,EAAEC;AAAtD;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AACE,UAAA,SAAS,EAAC,aADZ;AAEE,UAAA,IAAI,EAAE7C,YAFR;AAGE,UAAA,MAAM,EAAC,QAHT;AAIE,UAAA,GAAG,EAAC,YAJN;AAAA,oBAKG,aAAYD,cAAe;AAL9B;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAjBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA+BD,CAjLD;;GAAMI,G;;KAAAA,G;AAmLN,eAAeA,GAAf","sourcesContent":["import \"./styles/App.css\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport myEpicNft from \"./utils/MyEpicNFT.json\";\n\n// Constants\nconst TWITTER_HANDLE = \"ryan_c_harris\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = \"\";\nconst TOTAL_MINT_COUNT = 50;\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n\n  const [loading, setLoading] = useState(false);\n  const [connecting, setConnecting] = useState(false);\n\n  useEffect(() => {\n    checkIfWalletConnected();\n  }, []);\n\n  const checkIfWalletConnected = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      console.log(\"Connect your MetaMask wallet!\");\n    } else {\n      console.log(\"You are connected to MetaMask\", ethereum);\n    }\n\n    const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account);\n      setupEventListener();\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  };\n\n  const connectWallet = async () => {\n    setConnecting(true);\n\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n      setupEventListener();\n      setConnecting(false);\n    } catch (err) {\n      console.log(err);\n      setConnecting(false);\n    }\n  };\n\n  const askContractToMintNFT = async () => {\n    const CONTRACT_ADDRESS = \"0xDB24bE6Fb6c5e4c6F3C165663203b02bBDA70B59\";\n    try {\n      setLoading(true);\n\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          myEpicNft.abi,\n          signer\n        );\n\n        console.log(\"Going to pop wallet now to pay gas...\");\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n\n        console.log(\"Mining...please wait.\");\n        await nftTxn.wait();\n\n        console.log(\n          `Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`\n        );\n        setLoading(false);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n        setLoading(false);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const setupEventListener = async () => {\n    const CONTRACT_ADDRESS = \"0xDB24bE6Fb6c5e4c6F3C165663203b02bBDA70B59\";\n\n    // Most of this looks the same as our function askContractToMintNft\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        // Same stuff again\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          myEpicNft.abi,\n          signer\n        );\n\n        // THIS IS THE MAGIC SAUCE.\n        // This will essentially \"capture\" our event when our contract throws it.\n        // If you're familiar with webhooks, it's very similar to that!\n        connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber());\n          alert(\n            `Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`\n          );\n        });\n\n        console.log(\"Setup event listener!\");\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  const renderMintUi = () => {\n    return (\n      <button\n        onClick={askContractToMintNFT}\n        className=\"cta-button connect-wallet-button\"\n      >\n        Mint NFT\n      </button>\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">What Will Happen NFTs</p>\n          <p className=\"sub-text\">Tech predictions. General sillyness.</p>\n\n          {!loading && connecting && (\n            <p className=\"sub-text sub-text--small\">Connecting...</p>\n          )}\n          {loading && !connecting && (\n            <p className=\"sub-text sub-text--small\">Loading...</p>\n          )}\n          {!loading &&\n            !connecting &&\n            (currentAccount === \"\"\n              ? renderNotConnectedContainer()\n              : renderMintUi())}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built by @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}